<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>明年今日</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-20T01:11:41.643Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>明年今日</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>国王游戏与皇后游戏</title>
    <link href="http://yoursite.com/2019/04/20/%E5%9B%BD%E7%8E%8B%E6%B8%B8%E6%88%8F%E4%B8%8E%E7%9A%87%E5%90%8E%E6%B8%B8%E6%88%8F/"/>
    <id>http://yoursite.com/2019/04/20/国王游戏与皇后游戏/</id>
    <published>2019-04-20T00:05:30.000Z</published>
    <updated>2019-04-20T01:11:41.643Z</updated>
    
    <content type="html"><![CDATA[<h2 id="国王游戏"><a href="#国王游戏" class="headerlink" title="国王游戏"></a>国王游戏</h2><p>首先，每个人在左、右手上面分别有一个整数。然后，$N$位大臣排成一排，国王站在队伍的最前面。每位大臣获得的金币数分别是：排在该大臣前面的所有人的左手上的数的乘积除以他自己右手上的数，然后向下取整得到的结果。现在要使金币的最大值最小</p><hr><p>可以来试着推一下<br>先把关系设好<br>假设加上国王只有下面三个人（大臣$Minister$用$M$表示，金币用$C$）</p><div class="table-container"><table><thead><tr><th>人</th><th>左手</th><th>右手</th></tr></thead><tbody><tr><td>$King$</td><td>$a_0$</td><td>$b_0$</td></tr><tr><td>$M1$</td><td>$a_1$</td><td>$b_1$</td></tr><tr><td>$M2$</td><td>$a_2$</td><td>$b_2$</td></tr></tbody></table></div><p>当前答案：<br>\begin{aligned}<br>ans &amp;= max(C_{M1},C_{M2})  \\<br>&amp;= max(\frac{a_0}{b_1},\frac{a_0 \times a_1}{b_2})<br>\end{aligned}<br>两位大臣交换后：<br>\begin{aligned}<br>ans &amp;= max(C_{M2},C_{M1})  \\<br>&amp;= max(\frac{a_0}{b_2},\frac{a_0 \times a_2}{b_1})<br>\end{aligned}<br>假设不交换更优<br>那么$max(\frac{a_0}{b_2},\frac{a_0 \times a_2}{b_1})&gt;max(\frac{a_0}{b_1},\frac{a_0 \times a_1}{b_2})$<br>设这四项分别为$A,B,C,D$<br>显然$B&gt;C,D&gt;A$<br>又有$max(A,B)&gt;max(C,D)$<br>这个$A$是随便插空都可以的<br>但可知$D$一定大于$B$<br>即$\frac{a_0 \times a_2}{b_1}&gt;\frac{a_0 \times a_1}{b_2}$<br>所以$\frac{a_2}{b_1}&gt;\frac{a_1}{b_2}$<br>得出不等式$a_1 \times b_1 &lt; a_2 \times b_2$<br>结论$-&gt;$按$a \times b$从小到大排序会使答案更优<br>国王游戏就是这样<br>比较简单<br><strong>But要高精</strong><br><a href="https://www.luogu.org/problemnew/show/P1080" target="_blank" rel="noopener">传送门</a><br>代码： 压了一丢丢行<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">namespace</span> BigInteger &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Big_integer</span> &#123;</span></span><br><span class="line">        <span class="keyword">int</span> d[<span class="number">10005</span>], len;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clean</span><span class="params">()</span> </span>&#123;<span class="keyword">while</span>(len &gt; <span class="number">1</span> <span class="keyword">and</span> !d[len - <span class="number">1</span>]) len--;&#125;</span><br><span class="line">        Big_integer() &#123;<span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d); len = <span class="number">1</span>;&#125;</span><br><span class="line">        Big_integer(<span class="keyword">int</span> num) &#123;*<span class="keyword">this</span> = num;&#125;</span><br><span class="line">        Big_integer <span class="keyword">operator</span> = (<span class="keyword">const</span> <span class="keyword">char</span>* num) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(d, <span class="number">0</span>, <span class="keyword">sizeof</span> d); len = <span class="built_in">strlen</span>(num);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) d[i] = num[len - <span class="number">1</span> - i] - <span class="string">'0'</span>;</span><br><span class="line">            clean(); <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Big_integer <span class="keyword">operator</span> = (<span class="keyword">int</span> num) &#123;</span><br><span class="line">            <span class="keyword">char</span> s[<span class="number">10005</span>]; <span class="built_in">sprintf</span>(s, <span class="string">"%d"</span>, num);</span><br><span class="line">            *<span class="keyword">this</span> = s; <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Big_integer <span class="keyword">operator</span> * (<span class="keyword">const</span> Big_integer &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> i, j; Big_integer c;</span><br><span class="line">            c.len = len + b.len;</span><br><span class="line">            <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; b.len; j++)</span><br><span class="line">                <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">                    c.d[i + j] += d[i] * b.d[j];</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; c.len - <span class="number">1</span>; i++) c.d[i + <span class="number">1</span>] += c.d[i] / <span class="number">10</span>, c.d[i] %= <span class="number">10</span>;</span><br><span class="line">            c.clean(); <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        Big_integer <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">int</span> &amp;b) &#123;</span><br><span class="line">            <span class="keyword">int</span> i, j, a = <span class="number">0</span>; Big_integer c = *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">for</span> (i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">                a = a * <span class="number">10</span> + d[i];</span><br><span class="line">                <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">10</span>; j++) <span class="keyword">if</span> (a &lt; b * (j + <span class="number">1</span>)) <span class="keyword">break</span>;</span><br><span class="line">                c.d[i] = j;</span><br><span class="line">                a = a - b * j;</span><br><span class="line">            &#125;</span><br><span class="line">            c.clean(); <span class="keyword">return</span> c;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Big_integer &amp;b) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (len != b.len) <span class="keyword">return</span> len &lt; b.len;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = len - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">                <span class="keyword">if</span> (d[i] != b.d[i])</span><br><span class="line">                    <span class="keyword">return</span> d[i] &lt; b.d[i];</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="built_in">string</span> <span class="title">str</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">            <span class="keyword">char</span> s[<span class="number">10005</span>];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) s[len - <span class="number">1</span> - i] = d[i] + <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">return</span> s;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in, Big_integer &amp;x) &#123;</span><br><span class="line">        <span class="built_in">string</span> s; in &gt;&gt; s;</span><br><span class="line">        x = s.c_str(); <span class="keyword">return</span> in;</span><br><span class="line">    &#125;</span><br><span class="line">    ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out, <span class="keyword">const</span> Big_integer &amp;x) &#123;</span><br><span class="line">        out &lt;&lt; x.str();</span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> BigInteger;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> a, b;</span><br><span class="line">    <span class="keyword">friend</span> <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> node x, <span class="keyword">const</span> node y) &#123;</span><br><span class="line">        <span class="keyword">return</span> x.a * x.b &lt; y.a * y.b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;e[<span class="number">10010</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">Big_integer ans, tmp = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;e[<span class="number">1</span>].a, &amp;e[<span class="number">1</span>].b);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i++) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;e[i].a, &amp;e[i].b);</span><br><span class="line">    sort(e + <span class="number">2</span>, e + n + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; i++) tmp = tmp * e[i - <span class="number">1</span>].a, ans = max(ans, tmp / e[i].b);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>再看麻烦点的皇后游戏</p><hr><h2 id="皇后游戏"><a href="#皇后游戏" class="headerlink" title="皇后游戏"></a>皇后游戏</h2><p>皇后有$N$位大臣，每位大臣的左右手上面分别写上了一个正整数。要为$N$位大臣颁发奖金，其中第$i$位大臣所获得的奖金数目为第$i-1$位大臣所获得奖金数目与前$i$位大臣左手上的数的和的较大值再加上第$i$位大臣右手上的数。<br>即：设第$i$位大臣左手上的正整数为$a_i$，右手上的正整数为$b_i$，则第$i$位大臣获得的奖金数目为$C_i$可以表达为：<br><img src="https://i.loli.net/2019/03/02/5c79f49c15d1f.png" alt></p><hr><p>可以仿照着国王游戏自己yy一下<br>来看怎么做<br>我们还是假设两个大臣编号为$i$和$j$<br>设$C_{i-1}=Y,\sum_{k=1}^{i-1} a_k=X$<br>则当前答案为：<br>\begin{aligned} \text {ans} &amp;=\max \left(C_{M_{i}}, C_{M_{j}}\right) \\<br>&amp;=\max \left(\max \left(Y, X+a_{i}\right)+b_{i}, X+a_{i}+a_{j}\right) )+b_{j} \\<br>&amp;=\max \left(Y+b_{i}+b_{j}, X+a_{i}+b_{i}+b_{j}, X+a_{i}+a_{j}+b_{j}\right)<br>\end{aligned}<br>交换两位大臣的位置后：<br>\begin{aligned} \text {ans} &amp;=\max \left(C_{M_{J}}, C_{M_{i}}\right) \\<br>&amp;=\max \left(\max \left(Y, X+a_{j}\right)+b_{j}, X+a_{i}+a_{j}\right) )+b_{i} \\<br>&amp;=\max \left(Y+b_{i}+b_{j}, X+a_{j}+b_{i}+b_{j}, X+a_{i}+a_{j}+b_{i}\right)<br>\end{aligned}<br>假设交换更优<br>那么第二个等式大于第一个等式<br>发现两边都有$Y+b_i+b_j$，消去：<br>$max(X+a_j+b_i+b_j,X+a_i+a_j+b_i)&gt;max(X+a_i+b_i+b_j,X+a_i+a_j+b_j)$<br>再把共同的$X$提出来：<br>$max(a_j+b_i+b_j,a_i+a_j+b_i)&gt;max(a_i+b_i+b_j,a_i+a_j+b_j)$<br>把两边分别共有的拿出来：<br>$max(b_j,a_i)+a_j+b_i&gt;max(b_i,a_j)+a_i+b_j$<br>移项：<br>$max(b_j,a_i)-a_i-b_j&gt;max(b_i,a_j)-a_j-b_i$<br>可知两个中大的会被减掉然后剩下小的那个的相反数<br>即$-min(b_i,a_i)&gt;-min(b_j,a_j)$<br>最后得到：$min(a_i,b_j)&lt;min(a_j,b_i)$<br>又是一个简单式子</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;国王游戏&quot;&gt;&lt;a href=&quot;#国王游戏&quot; class=&quot;headerlink&quot; title=&quot;国王游戏&quot;&gt;&lt;/a&gt;国王游戏&lt;/h2&gt;&lt;p&gt;首先，每个人在左、右手上面分别有一个整数。然后，$N$位大臣排成一排，国王站在队伍的最前面。每位大臣获得的金币数分别是：排在
      
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="greedy" scheme="http://yoursite.com/tags/greedy/"/>
    
  </entry>
  
  <entry>
    <title>[POI2014]RAJ-Rally</title>
    <link href="http://yoursite.com/2019/04/01/POI2014-RAJ-Rally/"/>
    <id>http://yoursite.com/2019/04/01/POI2014-RAJ-Rally/</id>
    <published>2019-04-01T14:24:57.000Z</published>
    <updated>2019-04-16T13:43:49.932Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://www.luogu.org/problemnew/show/P3573" target="_blank" rel="noopener">传送门</a><br><a id="more"></a><br>找到一个点使删除这个点后图中的最长路最短<br>DAG——-&gt;拓扑<br>好吧第一步就挂掉了<br>标签线段树主席树？<br>好像线段树确实也能做<br>设$f[i]$表示到达$i$的最长路<br>$ff[i]$表示从$i$出发的最长路<br>一条最长路（起点$fr$,终点$ca$）一定等于 $f[fr]+ff[ca]+1$<br>所以做法就出来了<br>枚举每个点用一个堆来维护每个节点的贡献<br>可以删去和插入和询问最大值<br>记着最后把那个+1减掉<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @Date:   2019-04-01T16:39:57+08:00</span></span><br><span class="line"><span class="comment"> * @Last modified time: 2019-04-01T16:39:58+08:00</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;complex&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;climits&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> A 1000010</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> B 2010</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> next, to;</span><br><span class="line">&#125;e[A];</span><br><span class="line"><span class="keyword">int</span> heads[A], num, headt[A];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> fr, <span class="keyword">int</span> to, <span class="keyword">int</span> head[])</span> </span>&#123;</span><br><span class="line">    e[++num].next = head[fr];</span><br><span class="line">    e[num].to = to;</span><br><span class="line">    head[fr] = num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">heap</span> &#123;</span></span><br><span class="line">    priority_queue&lt;<span class="keyword">int</span>&gt; ins, del;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;ins.push(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">deletee</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;del.push(x);&#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (!del.empty() <span class="keyword">and</span> !ins.empty() <span class="keyword">and</span> del.top() == ins.top()) &#123;del.pop(); ins.pop();&#125;</span><br><span class="line">        <span class="keyword">return</span> ins.top();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;hp;</span><br><span class="line"><span class="keyword">int</span> n, m, a, b, in[A], tail, Q[A], f[A], ff[A], ans = <span class="number">0x3f3f3f3f</span>, pos;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">topo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="keyword">if</span> (!in[i]) q.push(i), Q[++tail] = i;</span><br><span class="line">    <span class="keyword">while</span> (!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> fr = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = heads[fr]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> ca = e[i].to;</span><br><span class="line">            <span class="keyword">if</span> (!--in[ca]) q.push(ca), Q[++tail] = ca;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        add(a, b, heads); add(b, a, headt);</span><br><span class="line">        in[b]++;</span><br><span class="line">    &#125;</span><br><span class="line">    topo();</span><br><span class="line">    fill(f + <span class="number">1</span>, f + n + <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//到达i的最长路径</span></span><br><span class="line">    fill(ff + <span class="number">1</span>, ff + n + <span class="number">1</span>, <span class="number">1</span>); <span class="comment">//从i出发的最长路径</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fr = Q[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = heads[fr]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> ca = e[i].to;</span><br><span class="line">            f[ca] = max(f[ca], f[fr] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = n; j &gt;= <span class="number">1</span>; j--) &#123;</span><br><span class="line">        <span class="keyword">int</span> fr = Q[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = headt[fr]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> ca = e[i].to;</span><br><span class="line">            ff[ca] = max(ff[ca], ff[fr] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) hp.insert(ff[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">        <span class="keyword">int</span> fr = Q[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = headt[fr]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> ca = e[i].to;</span><br><span class="line">            hp.deletee(f[ca] + ff[fr]);</span><br><span class="line">        &#125;</span><br><span class="line">        hp.deletee(ff[fr]);</span><br><span class="line">        <span class="keyword">if</span> (ans &gt; hp.top() - <span class="number">1</span>) &#123;</span><br><span class="line">            ans = hp.top() - <span class="number">1</span>;</span><br><span class="line">            pos = fr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = heads[fr]; i; i = e[i].next) &#123;</span><br><span class="line">            <span class="keyword">int</span> ca = e[i].to;</span><br><span class="line">            hp.insert(f[fr] + ff[ca]);</span><br><span class="line">        &#125;</span><br><span class="line">        hp.insert(f[fr]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="string">" "</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;题目链接：&lt;a href=&quot;https://www.luogu.org/problemnew/show/P3573&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;传送门&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="OI" scheme="http://yoursite.com/categories/OI/"/>
    
    
      <category term="拓扑" scheme="http://yoursite.com/tags/%E6%8B%93%E6%89%91/"/>
    
      <category term="Dp" scheme="http://yoursite.com/tags/Dp/"/>
    
  </entry>
  
  <entry>
    <title>My first</title>
    <link href="http://yoursite.com/2019/04/01/My-first/"/>
    <id>http://yoursite.com/2019/04/01/My-first/</id>
    <published>2019-04-01T11:36:44.000Z</published>
    <updated>2019-04-02T09:34:29.659Z</updated>
    
    <content type="html"><![CDATA[<h2 id="markdown测试"><a href="#markdown测试" class="headerlink" title="markdown测试"></a>markdown测试</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">priority_queue&lt;<span class="keyword">int</span>&gt; ins, del;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;ins.push(x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deletee</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;del.push(x);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">top</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (!del.empty() <span class="keyword">and</span> !ins.empty() <span class="keyword">and</span> del.top() == ins.top()) &#123;del.pop(); ins.pop();&#125;</span><br><span class="line">    <span class="keyword">return</span> ins.top();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><a id="more"></a><p>$LaTeX$测试</p><script type="math/tex; mode=display">\sqrt{1+\sqrt[^p\!]{1+a^2}}</script><script type="math/tex; mode=display">\int_a^b f(x)\mathrm{d}x</script><script type="math/tex; mode=display">\left(\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right)</script><script type="math/tex; mode=display">\mathbf{X} =\left( \begin{array}{ccc}x_{11} & x_{12} & \ldots \\x_{21} & x_{22} & \ldots \\\vdots & \vdots & \ddots\end{array} \right)</script><script type="math/tex; mode=display">y = \left\{ \begin{array}{ll}a & \textrm{if $d>c$}\\b+x & \textrm{in the morning}\\l & \textrm{all day long}\end{array} \right.</script>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;markdown测试&quot;&gt;&lt;a href=&quot;#markdown测试&quot; class=&quot;headerlink&quot; title=&quot;markdown测试&quot;&gt;&lt;/a&gt;markdown测试&lt;/h2&gt;&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;priority_queue&amp;lt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;&amp;gt; ins, del;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;ins.push(x);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;deletee&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; x)&lt;/span&gt; &lt;/span&gt;&amp;#123;del.push(x);&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;top&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (!del.empty() &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; !ins.empty() &lt;span class=&quot;keyword&quot;&gt;and&lt;/span&gt; del.top() == ins.top()) &amp;#123;del.pop(); ins.pop();&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; ins.top();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;hr&gt;
    
    </summary>
    
    
      <category term="others" scheme="http://yoursite.com/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/01/hello-world/"/>
    <id>http://yoursite.com/2019/04/01/hello-world/</id>
    <published>2019-04-01T03:25:36.856Z</published>
    <updated>2019-04-02T09:34:52.401Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><a id="more"></a><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Quick-Start&quot;&gt;&lt;a href=&quot;#Quick-Start&quot; class=&quot;headerlink&quot; title=&quot;Quick Start&quot;&gt;&lt;/a&gt;Quick Start&lt;/h2&gt;&lt;h3 id=&quot;Create-a-new-post&quot;&gt;&lt;a href=&quot;#Create-a-new-post&quot; class=&quot;headerlink&quot; title=&quot;Create a new post&quot;&gt;&lt;/a&gt;Create a new post&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ hexo new &lt;span class=&quot;string&quot;&gt;&quot;My New Post&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
